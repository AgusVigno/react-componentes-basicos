{"version":3,"sources":["components/Header.jsx","components/Footer.js","components/Producto.js","components/Carrito.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","Footer","fecha","Producto","producto","carrito","agregarProducto","productos","id","nombre","precio","type","onClick","filter","seleccionarProducto","eliminarProducto","Carrito","className","length","map","key","App","useState","Date","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wKASeA,MAPf,YAA2B,IAAVC,EAAS,EAATA,OAEb,OACI,4BAAKA,ICKEC,EARA,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACb,OACI,gCACI,iEAAyCA,K,OCqCtCC,EAxCE,SAAC,GAAqD,IAApDC,EAAmD,EAAnDA,SAAUC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,gBAAiBC,EAAe,EAAfA,UAC5CC,EAAsBJ,EAAtBI,GAAIC,EAAkBL,EAAlBK,OAAQC,EAAUN,EAAVM,OAmBnB,OACI,6BACI,4BAAKD,GACL,+BAAKC,GACHH,EAEE,4BACII,KAAK,SACLC,QAAS,kBAxBG,SAACJ,GACzB,IAAMJ,EAAWG,EAAUM,QAAQ,SAAAT,GAAQ,OAAIA,EAASI,KAAOA,KAAK,GACpEF,EAAgB,GAAD,mBACRD,GADQ,CAEXD,KAoBuBU,CAAoBN,KAFvC,WAKA,4BACIG,KAAK,SACLC,QAAS,kBApBA,SAACJ,GACtB,IAAMD,EAAYF,EAAQQ,QAAQ,SAAAT,GAAQ,OAAIA,EAASI,KAAOA,KAC9DF,EACIC,GAiBuBQ,CAAiBP,KAFpC,cCZDQ,G,MAjBC,SAAC,GAAD,IAAEX,EAAF,EAAEA,QAASC,EAAX,EAAWA,gBAAX,OACZ,yBAAKW,UAAU,WACX,qDAEoB,IAAnBZ,EAAQa,OACP,+CACAb,EAAQc,KAAK,SAAAf,GAAQ,OACnB,kBAAC,EAAD,CACIgB,IAAOhB,EAASI,GAChBJ,SAAYA,EACZC,QAAWA,EACXC,gBAAmBA,UCqCpBe,MA9Cf,WAAe,MAGwBC,mBAAS,CAC9C,CAACd,GAAI,EAAGC,OAAQ,oBAAqBC,OAAQ,IAC7C,CAACF,GAAI,EAAGC,OAAQ,kBAAmBC,OAAQ,IAC3C,CAACF,GAAI,EAAGC,OAAQ,oBAAqBC,OAAQ,IAC7C,CAACF,GAAI,EAAGC,OAAQ,oBAAqBC,OAAQ,MAPhC,mBAGPH,EAHO,aAWqBe,mBAAS,KAX9B,mBAWPjB,EAXO,KAWEC,EAXF,KAcRJ,GAAQ,IAAIqB,MAAOC,cAEzB,OAEC,kBAAC,WAAD,KACC,kBAAC,EAAD,CACCxB,OAAS,mBAGV,kDACCO,EAAUY,KAAI,SAAAf,GAAQ,OACtB,kBAAC,EAAD,CACCgB,IAAOhB,EAASI,GAChBJ,SAAYA,EACZG,UAAaA,EACbF,QAAWA,EACXC,gBAAmBA,OAIrB,kBAAC,EAAD,CACCD,QAAWA,EACXC,gBAAmBA,IAGpB,kBAAC,EAAD,CACCJ,MAASA,MClCOuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.389959a9.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header({titulo}) {\n\n    return (\n        <h1>{titulo}</h1>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst Footer = ({fecha}) => {\n    return (  \n        <footer>\n            <p>Todos los Derechos Reservados &copy; {fecha}</p>\n        </footer>\n    );\n}\n \nexport default Footer;","import React from 'react';\n\nconst Producto = ({producto, carrito, agregarProducto, productos}) => {\n    const {id, nombre, precio} = producto\n    \n    //Agregar producto al carrito\n    const seleccionarProducto = (id) => {\n        const producto = productos.filter( producto => producto.id === id )[0];\n        agregarProducto([\n            ...carrito,\n            producto\n        ]);\n    }\n    \n    //Eliminar producto del carrito\n    const eliminarProducto = (id) => {\n        const productos = carrito.filter( producto => producto.id !== id);\n        agregarProducto(\n            productos\n        );\n    }\n\n    return ( \n        <div>\n            <h2>{nombre}</h2>\n            <p>${precio}</p>\n            { productos\n            ? \n                <button\n                    type=\"button\"\n                    onClick={() => seleccionarProducto(id) }\n                >Comprar</button>\n            : \n                <button\n                    type=\"button\"\n                    onClick={() => eliminarProducto(id) }\n                >Eliminar</button>\n            }\n        </div>\n     );\n}\n \nexport default Producto;","import React from 'react';\nimport './carrito.css';\nimport Producto from './Producto';\n\nconst Carrito = ({carrito, agregarProducto}) => (\n    <div className=\"carrito\">\n        <h2>Tu carrito de compras</h2>\n       \n        {carrito.length === 0\n        ? <p>No hay elementos</p>\n        : carrito.map( producto => (      \n            <Producto\n                key = {producto.id} \n                producto = {producto}\n                carrito = {carrito}\n                agregarProducto = {agregarProducto}\n            />\n        ))}\n    </div>\n);\n\nexport default Carrito;","import React, { Fragment, useState } from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Producto from './components/Producto';\nimport Carrito from './components/Carrito';\n\nfunction App() {\n\n\t// Crear listado de productos\n\tconst [productos, guardarProductos] = useState([\n\t\t{id: 1, nombre: \"Camisa de Angular\", precio: 50},\n\t\t{id: 2, nombre: \"Camisa de VueJS\", precio: 20},\n\t\t{id: 3, nombre: \"Camisa de Node.js\", precio: 40},\n\t\t{id: 4, nombre: \"Camisa de ReactJS\", precio: 30}\n\t]);\n\n\t// State para el carrito de compras\n\tconst [carrito, agregarProducto] = useState([]);\n\n\t//Obtener fecha\n\tconst fecha = new Date().getFullYear();\n\t\n\treturn (\n\n\t\t<Fragment>\n\t\t\t<Header\n\t\t\t\ttitulo = \"Tienda Virtual\"\n\t\t\t/>\n\n\t\t\t<h1>Lista de Productos</h1>\n\t\t\t{productos.map(producto => (\n\t\t\t\t<Producto\n\t\t\t\t\tkey = {producto.id} \n\t\t\t\t\tproducto = {producto}\n\t\t\t\t\tproductos = {productos}\n\t\t\t\t\tcarrito = {carrito}\n\t\t\t\t\tagregarProducto = {agregarProducto}\n\t\t\t\t/>\n\t\t\t))}\n\n\t\t\t<Carrito \n\t\t\t\tcarrito = {carrito}\n\t\t\t\tagregarProducto = {agregarProducto}\n\t\t\t/>\n\t\t\t\n\t\t\t<Footer\n\t\t\t\tfecha = {fecha}\n\t\t\t/>\n\t\t</Fragment>\n\t)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}